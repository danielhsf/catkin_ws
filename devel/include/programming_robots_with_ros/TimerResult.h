// Generated by gencpp from file programming_robots_with_ros/TimerResult.msg
// DO NOT EDIT!


#ifndef PROGRAMMING_ROBOTS_WITH_ROS_MESSAGE_TIMERRESULT_H
#define PROGRAMMING_ROBOTS_WITH_ROS_MESSAGE_TIMERRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace programming_robots_with_ros
{
template <class ContainerAllocator>
struct TimerResult_
{
  typedef TimerResult_<ContainerAllocator> Type;

  TimerResult_()
    : time_elapsed()
    , updates_sent(0)  {
    }
  TimerResult_(const ContainerAllocator& _alloc)
    : time_elapsed()
    , updates_sent(0)  {
  (void)_alloc;
    }



   typedef ros::Duration _time_elapsed_type;
  _time_elapsed_type time_elapsed;

   typedef uint32_t _updates_sent_type;
  _updates_sent_type updates_sent;





  typedef boost::shared_ptr< ::programming_robots_with_ros::TimerResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::programming_robots_with_ros::TimerResult_<ContainerAllocator> const> ConstPtr;

}; // struct TimerResult_

typedef ::programming_robots_with_ros::TimerResult_<std::allocator<void> > TimerResult;

typedef boost::shared_ptr< ::programming_robots_with_ros::TimerResult > TimerResultPtr;
typedef boost::shared_ptr< ::programming_robots_with_ros::TimerResult const> TimerResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::programming_robots_with_ros::TimerResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::programming_robots_with_ros::TimerResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace programming_robots_with_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'programming_robots_with_ros': ['/home/robotica/catkin_ws/src/programming_robots_with_ros/msg', '/home/robotica/catkin_ws/devel/share/programming_robots_with_ros/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::programming_robots_with_ros::TimerResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::programming_robots_with_ros::TimerResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::programming_robots_with_ros::TimerResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::programming_robots_with_ros::TimerResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::programming_robots_with_ros::TimerResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::programming_robots_with_ros::TimerResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::programming_robots_with_ros::TimerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8227810e22df8077dd49231152c9e200";
  }

  static const char* value(const ::programming_robots_with_ros::TimerResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8227810e22df8077ULL;
  static const uint64_t static_value2 = 0xdd49231152c9e200ULL;
};

template<class ContainerAllocator>
struct DataType< ::programming_robots_with_ros::TimerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "programming_robots_with_ros/TimerResult";
  }

  static const char* value(const ::programming_robots_with_ros::TimerResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::programming_robots_with_ros::TimerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result definition\n\
duration time_elapsed\n\
uint32 updates_sent\n\
";
  }

  static const char* value(const ::programming_robots_with_ros::TimerResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::programming_robots_with_ros::TimerResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_elapsed);
      stream.next(m.updates_sent);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimerResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::programming_robots_with_ros::TimerResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::programming_robots_with_ros::TimerResult_<ContainerAllocator>& v)
  {
    s << indent << "time_elapsed: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.time_elapsed);
    s << indent << "updates_sent: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.updates_sent);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROGRAMMING_ROBOTS_WITH_ROS_MESSAGE_TIMERRESULT_H
